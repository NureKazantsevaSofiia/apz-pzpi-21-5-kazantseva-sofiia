1 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Spring Boot обрано як основний фреймворк для розробки серверної частини системи. Він забезпечує швидку конфігурацію, дозволяючи швидко створювати потужні додатки Java. Для автентифікації та авторизації користувачів використовується механізм OAuth2 з використанням JWT (JSON Web Tokens). JWT токени використовуються для забезпечення безпеки та контролю доступу до ресурсів. Паролі користувачів шифруються за допомогою BCryptPasswordEncoder, що забезпечує високий рівень безпеки. Це дозволяє захистити паролі від несанкціонованого доступу та зберігати їх у безпечному форматі. Для зберігання даних використовується MySQL як реляційна база даних. Для легкого налаштування та роботи з MySQL використовується Docker Compose. Spring Boot додаток приймає та обробляє запити від клієнтів, виконує бізнес-логіку та взаємодіє з базою даних через Hibernate та JPA. Hibernate і JPA використовуються для роботи з об'єктно-реляційним відображенням в базі даних та спрощують роботу з даними через об'єктно-орієнтовану модель. Також в проекті використовується Liquibase для керування міграціями бази даних, дозволяючи зберігати та виконувати версіоновані скрипти для структури бази даних. Система має можливість експорту та імпорту бази даних. Ця функціональність дозволяє зберігати та відновлювати дані з бази даних, що забезпечує безпеку та надійність системи. Усі дані в проекті обробляються з використанням кодування UTF-8. Це дозволяє коректно обробляти різноманітні символи та забезпечує сумісність з різними мовами та алфавітами. Для підтримки різних мов та культур використовується механізм локалізації повідомлень. Повідомлення можуть бути переведені на різні мови, залежно від налаштувань користувача. Використання ISO 8601 в проекті відповідає міжнародним стандартам та рекомендаціям, що сприяє сумісності програмного забезпечення з іншими системами та середовищами. Клієнти (Frontend, Мобільні додатки тощо) взаємодіють з бекендом через REST API, надсилаючи HTTP-запити. Усі компоненти системи та їх зв’язки між собою зображено на діаграмі розгортання (див. Додаток А).
Серверна частина програмної системи побудована за структурою: Модель-Контролер-Сервіс (Model-Controller-Service) або MVC, цю структуру можна переглянути на діаграмі пакетів (див. Додаток Б).  MVC дозволяє розділити логіку додатку на три ключові компоненти: модель, контролери та сервіси, що спрощує управління кодом та розуміння системи. Розділена структура дозволяє додавати нові функції або змінювати існуючі, мінімізуючи взаємозалежність між компонентами. Серверна частина програмної системи розподілена по таким пакетам : Пакет "Сервіси (Services)" містить класи, які містять бізнес-логіку додатка. Сервіси виконують конкретні операції над даними та обробляють їх відповідно до бізнес-правил.
Пакет «Репозиторії (Repositories)» містить класи, які взаємодіють з базою даних для виконання операцій CRUD (створення, читання, оновлення, видалення) над об'єктами.
Пакет «Контролери (Controllers)» містить контролери , які відповідають за обробку запитів від клієнтів, виклик сервісів та повернення відповідей клієнтам.
Пакет «Моделі (Models)» містить моделі, які відображають структуру даних додатка. Вони відображають об'єкти з бази даних та дані, які передаються через API.
Пакет «Конфігурація (Configuration)» міститися класи, які налаштовують різні аспекти додатка: підключення до бази даних, налаштування бібліотек, зберігання констант.
Пакет «Валідація (Validation)» містить класи та утиліти для перевірки валідності даних які отримують контролери.
Пакет «Помилки (Exceptions)» містить створенні власні помилки та їх перехоплювачі. Можливість створювати власні помилки дозволяє більш точно описувати та обробляти виняткові ситуації, що виникають у додатку.
Серверна частина використовує пакетну структуру для організації класів за їх функціональністю, де кожен пакет відповідає за певний аспект додатку. Ця архітектурна структура полегшує розуміння, розширення та підтримку проекту, допомагаючи зберігати код організованим і керованим.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання системи розумної парковки для безпілотних ваговозів показує типові компоненти та їх взаємодію в системі розумної парковки для безпілотних ваговозів (див. Додаток А). Система складається з наступних компонентів:
Веб-сервер: Веб-сервер слугує інтерфейсом для користувачів для доступу до інформації про систему та керування нею. Він реалізований за допомогою таких технологій, як Angular, HTML та CSS.
Сервер баз даних: Сервер баз даних зберігає інформацію про систему, включаючи дані про безпілотні ваговози, паркувальні місця та користувачів. Він реалізований за допомогою такої технології MySQL.
Сервер додатків: Сервер додатків обробляє логіку системи та забезпечує взаємодію між різними компонентами. Він реалізований за допомогою такої технології, як Spring Boot, REST API, Hibernate та Liquibase.
Безпілотні ваговози та місця для паркування - це фізичні об'єкти, які оснащені різними датчиками та технологіями, такими як Arduino та C++.
Мобільні пристрої: Мобільні пристрої використовуються користувачами для взаємодії з системою. Вони можуть мати операційну систему Android або iOS.
Компоненти системи розумної парковки для безпілотних ваговозів взаємодіють один з одним наступним чином:
- Користувач взаємодіє з веб-сервером, щоб отримати інформацію про систему або керувати нею.
- Веб-сервер надсилає запити до сервера додатків для отримання або оновлення інформації про систему.
- Сервер додатків звертається до сервера баз даних для отримання або оновлення інформації про систему.
- Сервер додатків надсилає команди безпілотним візкам для виконання завдань, таких як переміщення до паркувального місця або забирання пасажира.
- Безпілотні ваговози та місця для парковки використовують свої датчики та технології для надання точних параметрів в реальному часі.
- Мобільні пристрої використовуються користувачами для отримання інформації про систему, таких як параметри безпілотного ваговозу або статус паркувального місця.

3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток Г). Основні функції реалізовані у додатку:
–	Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними. Налаштування безпеки системи розташовані у пакеті з конфігурацією у класі WebSecurityConfig.java.
–	Можливість адмінів переглядати усіх водіїв та менеджерів та видаляти їх, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів переглядати затверджених та відхилених адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів додавати адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість адмінів робити експорт та імпорт бази даних, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість головного адміна переглядати історію операцій над базою даних, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Можливість головного адміна затверджувати та відхиляти нових адмінів, ця логіка реалізовано у сервісі AdminServiceImpl.java.
–	Менеджери ваговозів мають можливість додавати, переглядати та оновлювати інформацію про ваговози, ця логіка реалізовано у сервісі TruckServiceImpl.java.
–	Менеджери парковок мають можливість додавати, переглядати та оновлювати інформацію про місця для паркування, ця логіка реалізовано у сервісі ParkingPlaceServiceImpl.java.
–	Менеджери ваговозів можуть виконати пошук найкращого місця для ваговоза для паркування на певній парковці, пошук відбувається за параметрами ваговозу та місця для паркування та за допомогою формули розраховується кут заїзду до місця й враховуючі ці дані обирається найкраще місце, ця логіка реалізована у методі, наведеному у класі ParkingManagerServiceImpl.java.
–	Менеджери ваговозів мають можливість створювати різних типів (паркування, завантаження, вивантаження) накладні, ця логіка реалізована у сервісі InvoiceServiceImpl.java.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза, ця логіка реалізовано у сервісі InvoiceServiceImpl.java.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі, ця логіка реалізовано у сервісі TruckServiceImpl.java.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування, ця логіка реалізовано у сервісі ParkingPlaceServiceImpl.java.
Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду.
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Принцип SOLID: Застосування цих принципів для створення коду, який є гнучким, легко розширюється та підтримується.
CamelCase та описові назви: Дотримання назв класів, методів та змінних з CamelCase та використання описових назв, які чітко відображають їхню функціональність.
Форматування коду: Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Використання іменованих конвенцій Spring: Використання конвенцій іменування для створення контролерів, сервісів, репозиторіїв і т. д. у Spring, таких як AdminController, AdminService, AdminRepository.
Використання компонентної архітектури Spring: Розділення коду на компоненти, використання анотацій Spring для правильного управління залежностями та іншими аспектами.
Безпека: Застосування засобів безпеки, таких як Spring Security, для захисту ресурсів.

4 ПОБУДОВА ER-ДІАГРАМИ

Для зберігання даних використовується MySQL як реляційна база даних. Для проектування бази даних попередньо була розроблена ER-діаграма (див. Додаток В). 
База даних складається з 12 таблиць: користувачі (Users), адміністратори (Admins), менеджери ваговозів (TruckManagers), менеджери парковок (ParkingManagers), ваговози (Trucks), місця для паркування (ParkingPlaces), накладні (Invoices),  товари (Items), компанії (Companies), компанії ваговозів (TruckCompanies), компанії парковок (ParkingCompanies), історія бази даних (DatabaseHistory).
У базі даних наявні наступні зв’язки між сутностями:
–	користувач та адмін один до одного;
–	користувач та менеджер ваговозів один до одного;
–	користувач та менеджер парковок один до одного;
–	компанія та компанія ваговозів один до одного;
–	компанія та компанія парковок один до одного;
–	менеджер ваговозів та ваговоз один до багатьох;
–	менеджер парковок та місце для паркування один до багатьох;
–	менеджер ваговозів та компанія ваговозів один до одного;
–	менеджер парковок та компанії парковок один до одного;
–	менеджер ваговозів та накладна один до багатьох;
–	менеджер парковок та накладна один до багатьох;
–	місце для паркування та накладна один до багатьох;
–	ваговіз та накладна один до багатьох;
–	накладна та товар один до багатьох.

5 СПЕЦИФІКАЦІЯ REST

Клієнти взаємодіють з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 63 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного запиту наведена у таблиці 1.

6 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Серверна частина програмної системи побудована за структурою: Модель-Контролер-Сервіс (Model-Controller-Service) або MVC, цю структуру можна переглянути на діаграмі пакетів (див. Додаток Б).  MVC дозволяє розділити логіку додатку на три ключові компоненти: модель, контролери та сервіси, що спрощує управління кодом та розуміння системи. Розділена структура дозволяє додавати нові функції або змінювати існуючі, мінімізуючи взаємозалежність між компонентами. Серверна частина програмної системи розподілена по таким пакетам : Пакет "Сервіси (Services)" містить класи, які містять бізнес-логіку додатка. Сервіси виконують конкретні операції над даними та обробляють їх відповідно до бізнес-правил.
Пакет «Репозиторії (Repositories)» містить класи, які взаємодіють з базою даних для виконання операцій CRUD (створення, читання, оновлення, видалення) над об'єктами.
Пакет «Контролери (Controllers)» містить контролери , які відповідають за обробку запитів від клієнтів, виклик сервісів та повернення відповідей клієнтам.
Пакет «Моделі (Models)» містить моделі, які відображають структуру даних додатка. Вони відображають об'єкти з бази даних та дані, які передаються через API.
Пакет «Конфігурація (Configuration)» міститися класи, які налаштовують різні аспекти додатка: підключення до бази даних, налаштування бібліотек, зберігання констант.
Пакет «Валідація (Validation)» містить класи та утиліти для перевірки валідності даних які отримують контролери.
Пакет «Помилки (Exceptions)» містить створенні власні помилки та їх перехоплювачі. Можливість створювати власні помилки дозволяє більш точно описувати та обробляти виняткові ситуації, що виникають у додатку.
Серверна частина використовує пакетну структуру для організації класів за їх функціональністю, де кожен пакет відповідає за певний аспект додатку. Ця архітектурна структура полегшує розуміння, розширення та підтримку проекту, допомагаючи зберігати код організованим і керованим.

ВИСНОВКИ

Розробили та отримали навички з проектування серверної частини проекту за темою: «Програмна система для розумної парковки для безпілотних ваговозів». Отримали навички з проектування діаграми прецедентів, ER-діаграми, діаграми пакетів та діаграми розгортання. У ході роботи були спроектовані база даних та реалізована серверна частина системи. 
Посилання на відео YouTube: https://www.youtube.com/watch?v=tEolsaRqgww
Посилання на код GitHub: https://github.com/NureKazantsevaSofiia/apz-pzpi-21-5-kazantseva-sofiia/tree/main/Task2

ДОДАТОК А
Специфікація REST

Таблиця 1 – Специфікація REST API 
Об’єкт	Метод 	Посилання Опис
Користувач    
  POST	/login	Вхід до системи
Всі адміни    
  GET	/api/admins/{admin-id}	Отримання профілю адміна
  POST	/api/admins/{admin-id}/add/{email}	Додавання адміна
  GET	/api/admins/{admin-id}/truck-managers	Отримання усіх менеджерів ваговозів
  GET	/api/admins/{admin-id}/parking-managers	Отримання усіх менеджерів парковок
  DELETE	/api/admins/{admin-id}/truck-managers/{truck-manager-id}	Видалення менеджера ваговозів
  DELETE	/api/admins/{admin-id}/parking-managers/{parking-manager-id}	Видалення менеджера парковок
  GET	/api/admins/approved	Отримання усіх затверджених адмінів
  GET	/api/admins/not-approved	Отримання усіх не затверджених адмінів
  GET	/api/admins/{admin-id}/db/export	Експорт бази даних
  POST	/api/admins/{admin-id}/db/import	Імпорт бази даних
Головний адмін	  
  POST	/api/admins/{admin-id}/approve/{new-admin-id}	Затвердження нового адміна
  POST	/api/admins/{admin-id}/decline/{new-admin-id}	Відхилення нового адміна
  GET	/api/admins/{admin-id}/db/history	Перегляд історії операцій над базою даних
Адмін             
  PATCH	/api/admins/{admin-id}	Оновлення профілю адміна
Менеджер ваговозів  
  POST	/api/truck-manager/register	Реєстрація менеджера ваговозів
  GET	/api/truck-manager/{user-id}	Отримання профілю менеджера ваговозів
  PATCH	/api/truck-manager/{user-id}	Редагування профілю менеджера ваговозів
  DELETE	/api/truck-manager/{user-id}	Видалення менеджера ваговозів
  POST	/api/truck-manager/{user-id}/trucks	Додавання ваговозу
  GET	/api/truck-manager/{user-id}/trucks/{truck-id}	Отримання профілю ваговозу
  PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення профілю ваговоза
  DELETE	/api/truck-manager/{user-id}/trucks/{truck-id}	Видалення ваговозу
  GET	/api/truck-manager/{user-id}/trucks	Отримання усіх ваговозів компанії
  GET	/api/truck-manager/{user-id}/trucks/without-manager	Отримання усіх ваговозів компанії без менеджера
  PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/remove-manager	Видалення менеджера ваговозу
  PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/add-manager	Додавання менеджера ваговозу
  PATCH	/api/truck-manager/{user-id}/company/{company-id}	Зміна компанії менеджера ваговозів
  GET	/api/truck-manager/{user-id}/trucks/{truck-id}/companies/{company-id}/search-place	Пошук найкращого місця для ваговозу
  POST	/api/truck-manager/{user-id}/invoices	Створення накладної
  PATCH	/api/truck-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером ваговозів
  GET	/api/truck-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
  GET	/api/truck-manager/{user-id}/invoices	Отримання усіх накладних менеджера ваговозів
  GET	/api/truck-manager/{user-id}/invoices/truck-number/{truck-number}	Пошук накладної за номером ваговозу
  GET	/api/truck-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
  GET	/api/truck-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
  GET	/api/truck-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Менеджер парковок   
  POST	/api/parking-manager/register	Реєстрація менеджера парковок
  GET	/api/parking-manager/{user-id}	Отримання профілю менеджера парковок
  PATCH	/api/parking-manager/{user-id}	Редагування профілю менеджера парковок
  DELETE	/api/parking-manager/{user-id}	Видалення менеджера парковок
  PATCH	/api/parking-manager/{user-id}/company/{company-id}	Зміна компанії менеджера парковок
  POST	/api/parking-manager/{user-id}/parking-places	Додавання місця для паркування
  GET	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Отримання профілю місця для паркування
  PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Оновлення профілю місця паркування
  DELETE	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Видалення місця паркування
  GET	/api/parking-manager/{user-id}/parking-places	Отримання усіх місць для паркування компанії
  GET	/api/parking-manager/{user-id}/parking-places/without-manager	Отримання усіх місць для паркування без менеджера компанії
  PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/remove-manager	Видалення менеджера місця для паркування
  PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/add-manager	Додавання менеджера місця паркування
  PATCH	/api/parking-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером парковок
  GET	/api/parking-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
  GET	/api/parking-manager/{user-id}/invoices	Отримання усіх накладних менеджера парковок
  GET	/api/parking-manager/{user-id}/invoices/place-number/{place-number}	Пошук накладної за номером місця паркування
  GET	/api/parking-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
  GET	/api/parking-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
  GET	/api/parking-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Компанія ваговозів	
  POST	/api/truck-company/register	Реєстрація компанії ваговозів
  GET	/api/truck-company/search	Пошук компанії ваговозів за назвою
  PATCH	/api/truck-manager/{user-id}/truck-company/{company-id}	Оновлення профілю компанії ваговозів
Компанія парковок	
  POST	/api/parking-company/register	Реєстрація компанії парковок
  GET	/api/parking-company/search	Пошук компанії парковок за назвою
  PATCH	/api/parking-manager/{user-id}/parking-company/{company-id}	Оновлення профілю компанії парковок
