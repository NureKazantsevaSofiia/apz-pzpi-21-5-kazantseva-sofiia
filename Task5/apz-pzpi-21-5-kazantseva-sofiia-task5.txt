1 ОПИС АРХІТЕКТУРИ МОБІЛЬНОГО ДОДАТКУ

Kotlin обрано як основну мову програмування для розробки мобільного додатку. Вона забезпечує високу продуктивність, зручний синтаксис та чудову інтеграцію з платформою Android. Архітектура мобільного додатку реалізована як моноліт з розподіленою логікою між різними пакетами, що забезпечує модульність та легкість у підтримці. Основні пакети включають, можна також їх розглянути на діаграмі пакетів у Додаток Г:
model, що містить класи для формування запитів (request) та обробки відповідей (response);
service, що містить бізнес-логіку додатку, обробку даних та взаємодію з репозиторіями даних;
ui, що включає активності (activity) для різних екранів додатку та адаптери (adapter) для роботи з компонентами користувацького інтерфейсу, такими як RecyclerView;
util, що містить допоміжні класи та функції для роботи з мережею, перетворення даних тощо.
JWT Bearer Tokens використовуються для авторизації користувачів у мобільному додатку. Після успішного входу користувач отримує токен, який зберігається локально та додається до заголовків HTTP-запитів для забезпечення безпеки та перевірки автентичності на сервері. Для надсилання HTTP-запитів використовується Retrofit. Цей клієнт дозволяє зручно створювати та обробляти запити до бекенду, використовуючи аннотації для визначення типів запитів та параметрів. Retrofit забезпечує легке перетворення відповідей у моделі даних, що спрощує роботу з API.
Для зручного підключення до локального сервера бекенду використовується ngrok. Він створює безпечний тунель, через який мобільний додаток надсилає запити до бекенду, що дозволяє розробникам тестувати додаток у реальних умовах без необхідності розгортати сервер у публічному інтернеті. Спілкування з бекендом відбувається через RESTful HTTP API, що забезпечує стандартизовану взаємодію між фронтендом і бекендом та дозволяє легко масштабувати і розширювати систему.
У додатку реалізована система обробки та відловлення помилок. За допомогою try-catch блоків відловлюються виключення, що виникають під час виконання HTTP-запитів. Користувач отримує локалізовані повідомлення про помилки, що покращує досвід взаємодії з додатком. Наприклад, при помилці 401 Unauthorized користувачеві відображається повідомлення про несанкціонований доступ. Додаток підтримує локалізацію на українську та англійську мови. Для цього використовуються окремі ресурсні файли: res/values/strings.xml для англійської мови та res/values-uk/strings.xml для української мови. Локалізація дозволяє відображати текстові повідомлення, помилки та інші елементи інтерфейсу на мові, обраній користувачем, що підвищує зручність використання додатку для різних мовних груп.
Під час розробки додатку було дотримано правил чистого коду. Це означає, що код є зрозумілим, легко підтримуваним та масштабованим. Всі компоненти організовані логічно, імена змінних, функцій та класів є інформативними та описовими. Використання принципів SOLID, DRY та KISS дозволило створити кодову базу, яка є простою для розуміння та подальшої розробки.
Використання Kotlin, JWT Bearer Tokens, Retrofit, ngrok та RESTful API дозволяє створити ефективний та зручний мобільний додаток. Архітектура моноліту з розподіленою логікою між пакетами model, service, ui та util забезпечує модульність і легкість у підтримці. Система обробки помилок та локалізація забезпечують високий рівень користувацького досвіду, роблячи додаток доступним для широкої аудиторії. Дотримання принципів чистого коду під час розробки гарантує, що додаток залишатиметься зрозумілим та підтримуваним у довгостроковій перспективі.
Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток А). Основні функції реалізовані у додатку:
–	 Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними.
–	Менеджери ваговозів мають можливість переглядати та оновлювати інформацію про ваговози.
–	Менеджери парковок мають можливість переглядати та оновлювати інформацію про місця для паркування.
–	Менеджери ваговозів мають можливість переглядати накладні.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза.
–	Менеджери мають можливість завантажувати підписані накладні у вигляді pdf файлів.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування.
Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду, логіку взаємодії можна розглянути на діаграмі компонентів у Додаток Б.
Діаграма прецедентів дозволяє визначити функціональність системи через "випадки використання" або "сценарії", які описують взаємодію між користувачами (акторами) та системою (див. Додаток А). Діаграма компонентів дозволяє відобразити компоненти програмного забезпечення, бібліотеки, модулі, файли конфігурації та інші ресурси, які утворюють систему (див. Додаток Б). ER-діаграма дозволяє відображати структуру баз даних, їх елементи та взаємозв'язки між ними (див. Додаток В). Діаграма пакетів дозволяє групувати елементи моделі у вигляді пакетів та відображати залежності між ними (див. Додаток Г).
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Дотримання назв класів, методів та змінних та використання описових назв, які чітко відображають їхню функціональність.
Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Функції є невеликими та виконують одну конкретну задачу. Класи також мають чітко визначену відповідальність.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Основний функціонал  реалізує логіку системи для розумної парковки безпілотних ваговозів, яка надає можливість ввести зручно документацію, обирати місця для паркування та відстежувати параметри ваговозів та місць у реальному часі. На діаграмі прецедентів відображено основну логіку серверної системи, функціональність системи та взаємодію користувачів з нею (див. Додаток А). Основні функції реалізовані у додатку:
–	 Авторизація за допомогою OAuth2 з використанням JWT токенів, що дозволяє захищати ресурси та контролювати доступ до них з використанням токенів авторизації, що забезпечує безпеку та контроль над даними.
–	Менеджери ваговозів мають можливість переглядати та оновлювати інформацію про ваговози.
–	Менеджери парковок мають можливість переглядати та оновлювати інформацію про місця для паркування.
–	Менеджери ваговозів мають можливість переглядати накладні.
–	Менеджери можуть підписувати накладні, спочатку менеджер парковки, а потім лише менеджер ваговоза.
–	Менеджери мають можливість завантажувати підписані накладні у вигляді pdf файлів.
–	Менеджери ваговозів можуть отримувати інформацію в реальному часі про показники/параметри ваговозі.
–	Менеджери парковки можуть отримувати інформацію в реальному часі про показники/параметри місць для паркування.

3 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Описані функції відображають основні можливості та процеси, які автоматизують  контроль за документацією та станом ваговозів та місць для паркування та запобігає надзвичайним ситуаціям, що можуть виникнути в під час паркування за допомогою розрахунку найкращого місця для паркування за допомогою параметрів та визначення кута заїзду, логіку взаємодії можна розглянути на діаграмі компонентів у Додаток Б.

4 ПОБУДОВА ДІАГРАМИ ER-ДІАГРАМА

ER-діаграма дозволяє відображати структуру баз даних, їх елементи та взаємозв'язки між ними (див. Додаток В).

5 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Архітектура мобільного додатку реалізована як моноліт з розподіленою логікою між різними пакетами, що забезпечує модульність та легкість у підтримці. Основні пакети включають, можна також їх розглянути на діаграмі пакетів у Додаток Г:
model, що містить класи для формування запитів (request) та обробки відповідей (response);
service, що містить бізнес-логіку додатку, обробку даних та взаємодію з репозиторіями даних;
ui, що включає активності (activity) для різних екранів додатку та адаптери (adapter) для роботи з компонентами користувацького інтерфейсу, такими як RecyclerView;
util, що містить допоміжні класи та функції для роботи з мережею, перетворення даних тощо.

6 СПЕЦИФІКАЦІЯ REST

Мобільний додаток взаємодіє з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 42 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного запиту наведена у таблиці 1.

ВИСНОВКИ

Розробили та отримали навички з проектування мобільного додатку частини системи «Програмна система для розумної парковки для безпілотних ваговозів». Отримали навички з проектування діаграми прецедентів, діаграми компонентів, ER-діаграми та діаграми пакетів. У ході роботи було реалізовано функціонал мобільного додатку системи.
Посилання на відео YouTube: https://www.youtube.com/watch?v=DQWS_1QlEWI
Посилання на код на GitHub: https://github.com/NureKazantsevaSofiia/apz-pzpi-21-5-kazantseva-sofiia/tree/main/Task4

ДОДАТОК А
Специфікація REST
Таблиця 1 – Специфікація REST API
Об’єкт	Метод	Посилання	Опис
Менеджер ваговозів	POST	/api/truck-manager/register	Реєстрація менеджера ваговозів
	GET	/api/truck-manager/{user-id}	Отримання профілю менеджера ваговозів
	PATCH	/api/truck-manager/{user-id}	Редагування профілю менеджера ваговозів
	DELETE	/api/truck-manager/{user-id}	Видалення менеджера ваговозів
	POST	/api/truck-manager/{user-id}/trucks	Додавання ваговозу
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}	Отримання профілю ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}	Оновлення профілю ваговоза
	DELETE	/api/truck-manager/{user-id}/trucks/{truck-id}	Видалення ваговозу
	GET	/api/truck-manager/{user-id}/trucks	Отримання усіх ваговозів компанії
	GET	/api/truck-manager/{user-id}/trucks/without-manager	Отримання усіх ваговозів компанії без менеджера
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/remove-manager	Видалення менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}/add-manager	Додавання менеджера ваговозу
	PATCH	/api/truck-manager/{user-id}/company/{company-id}	Зміна компанії менеджера ваговозів
	GET	/api/truck-manager/{user-id}/trucks/{truck-id}/companies/{company-id}/search-place	Пошук найкращого місця для ваговозу
	POST	/api/truck-manager/{user-id}/invoices	Створення накладної
	PATCH	/api/truck-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером ваговозів
	GET	/api/truck-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/truck-manager/{user-id}/invoices	Отримання усіх накладних менеджера ваговозів
	GET	/api/truck-manager/{user-id}/invoices/truck-number/{truck-number}	Пошук накладної за номером ваговозу
	GET	/api/truck-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/truck-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
Менеджер парковок	POST	/api/parking-manager/register	Реєстрація менеджера парковок
	GET	/api/parking-manager/{user-id}	Отримання профілю менеджера парковок
	PATCH	/api/parking-manager/{user-id}	Редагування профілю менеджера парковок
	DELETE	/api/parking-manager/{user-id}	Видалення менеджера парковок
	PATCH	/api/parking-manager/{user-id}/company/{company-id}	Зміна компанії менеджера парковок
	POST	/api/parking-manager/{user-id}/parking-places	Додавання місця для паркування
	GET	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Отримання профілю місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Оновлення профілю місця паркування
	DELETE	/api/parking-manager/{user-id}/parking-places/{parking-place-id}	Видалення місця паркування
	GET	/api/parking-manager/{user-id}/parking-places	Отримання усіх місць для паркування компанії
	GET	/api/parking-manager/{user-id}/parking-places/without-manager	Отримання усіх місць для паркування без менеджера компанії
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/remove-manager	Видалення менеджера місця для паркування
	PATCH	/api/parking-manager/{user-id}/parking-places/{parking-place-id}/add-manager	Додавання менеджера місця паркування
	PATCH	/api/parking-manager/{user-id}/invoices/{invoice-id}	Підписання накладної менеджером парковок
	GET	/api/parking-manager/{user-id}/invoices/{invoice-id}	Отримання накладної
	GET	/api/parking-manager/{user-id}/invoices	Отримання усіх накладних менеджера парковок
	GET	/api/parking-manager/{user-id}/invoices/place-number/{place-number}	Пошук накладної за номером місця паркування
	GET	/api/parking-manager/{user-id}/invoices/signed	Отримання усіх підписаних накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-parking-manager	Отримання усіх не підписаних менеджером парковок накладних
	GET	/api/parking-manager/{user-id}/invoices/not-signed-by-truck-manager	Отримання усіх накладних не підписаних менеджером ваговозів
