1 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Функціонал розумного пристрою реалізовано за допомогою таких технологій як Arduino, C++, Python, REST. Логіка полягає у передачі даних від датчиків, зокрема датчики температури та звуку (див. Рисунок 1), їх аналізі та обробки.
Архітектура системи включає в себе фізичну і логічну організацію компонентів програмної системи та їх взаємодію. У системі ми маємо дві основні частини: Arduino та серверний додаток на Python. Так як мій Arduino пристрій не має можливості передавати дані через Wifi, тож передачу даних було реалізовано за допомогою компорту.  Код Arduino написаний на С++  взаємодіє з датчиками температури та звуку, вимірює значення цих датчиків і надсилає їх через Serial порт до серверного додатка на Python. Arduino також відповідає за обробку даних, а саме спочатку дані отримані від датчиків переводяться за допомогою математичного методу з одного діапазону значень в інший (відповідний до параметру ваговозу чи місця для парковки), потім виконується три вимірювання і по ним вираховується середнє значення та похибка за формулами. Кінцевими параметрами, які надсилаються до нашого додатку на Python є середнє значення з урахуванням похибки.
Серверний додаток на Python написаний за допомогою фреймворку Flask, приймає дані від Arduino через Serial порт, обробляє ці дані, створює об'єкти класів Truck та ParkingPlace та надсилає відповідні дані у відповідь на запит, та надсилає запити на оновлення даних ваговозу чи місця для парковки на бекенд. Flask - це легковагий фреймворк для створення веб-додатків на мові програмування Python. Він дозволяє швидко створювати веб-додатки з мінімальними зусиллями, але при цьому надає потужні можливості для розширення і розвитку проектів. Усі запити повинні бути авторизовані за допомогою bearer токенів, тому код містить ще перевірку та парсинг токену, та усі запити виконуються за допомогою REST, HTTP запитів.
Основний функціонал  реалізує логіку системи отримання оновлених даних ваговозів та місць для парковки у реальному часі. На діаграмі прецедентів відображено основну логіку розумного пристрою, функціональність системи та взаємодію користувачів з нею (див. Додаток А). Реалізовано основну логіку:
- Отримання даних від датчиків.
- Обробка даних від датчика температури та звуку, переведення їх з одного діапазону значень до діапазону параметрів ваговозу та місць для парковки.
- Обробка параметрів ваговозів та місць для парковки за допомогою трьох вимірювань, обчислення похибки та середнього значення.
- Валідація та обробка отриманих даних.
- Відправка даних як результат запиту та надсилання запитів до бекенду.
Діаграма взаємодії надає загальне уявлення про послідовність інтеракцій між об'єктами, компонентами та модулями системи (див. Додаток Б). Діаграма діяльності показує послідовність дій або операцій, які виконуються у системі. Вона демонструє, які елементи взаємодії виконують роботу в процесі, що і як вони виконують (див. Додаток В). Діаграма станів моделює різні стани, в яких може перебувати об'єкт, система або компонент у системі (див. Додаток Г). Вона показує переходи між цими станами, події або умови, що спричиняють переходи між ними, і дії, які відбуваються при цих переходах.
Під час реалізації цього функціоналу було дотримано правил чистого коду.
Дотримання назв класів, методів та змінних та використання описових назв, які чітко відображають їхню функціональність.
Використання стандартних правил форматування, правильна відступів, розташування дужок тощо.
Функції є невеликими та виконують одну конкретну задачу. Класи також мають чітко визначену відповідальність.

2 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Діаграма взаємодії надає загальне уявлення про послідовність інтеракцій між об'єктами, компонентами та модулями системи (див. Додаток Б).

3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

На діаграмі прецедентів відображено основну логіку розумного пристрою, функціональність системи та взаємодію користувачів з нею (див. Додаток А). Реалізовано основну логіку:
- Отримання даних від датчиків.
- Обробка даних від датчика температури та звуку, переведення їх з одного діапазону значень до діапазону параметрів ваговозу та місць для парковки.
- Обробка параметрів ваговозів та місць для парковки за допомогою трьох вимірювань, обчислення похибки та середнього значення.
- Валідація та обробка отриманих даних.
- Відправка даних як результат запиту та надсилання запитів до бекенду.

4 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності показує послідовність дій або операцій, які виконуються у системі. Вона демонструє, які елементи взаємодії виконують роботу в процесі, що і як вони виконують (див. Додаток В).

5 ПОБУДОВА ДІАГРАМИ СТАНУ

Діаграма станів моделює різні стани, в яких може перебувати об'єкт, система або компонент у системі (див. Додаток Г). Вона показує переходи між цими станами, події або умови, що спричиняють переходи між ними, і дії, які відбуваються при цих переходах.

6 СПЕЦИФІКАЦІЯ REST

Розумний пристрій взаємодіє з сервісною частиною через REST API, надсилаючи HTTP-запити. REST API в проекті складається із 6 запитів. Кожний запит відповідає за надання даних клієнту та виконання бізнес логіки.

ВИСНОВКИ

Розробили та отримали навички з проектування розумного пристрою частини проекту за темою: «Програмна система для розумної парковки для безпілотних ваговозів». Отримали навички з проектування діаграми прецедентів, діаграми взаємодії, діаграми діяльності та діаграми компонентів. У ході роботи було реалізовано функціонал розумного пристрою системи.
Посилання на відео на YouTube: https://www.youtube.com/watch?v=tloswKjKEbE
Посилання на код на GitHub:

ДОДАТОК А
Специфікація REST

Таблиця 1 – Специфікація REST API
Об’єкт	Метод 	Посилання Опис
Ваговіз
    POST	/connect/truck      Підключення до датчиків як менеджер ваговозів
    PATCH	/api/truck-manager/{user-id}/trucks/{truck-id}      Оновлення даних ваговозу
    GET	/truck/get-data     Отримання оновлених даних ваговозу
Місце для парковки
    POST	/connect/parking-place      Підключення до датчиків як менеджер парковки
    PATCH	/api/parking-manager/{user-id}/parking-places/{place-id}        Оновлення даних місця для парковки
    GET	/parking-place/get-data     Отримання оновлених даних місця для парковки